package com.samsung.incentive;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class Request implements java.io.Serializable {

	static final long serialVersionUID = 1L;
	private java.lang.String schemeName;
	private String schemeStartDate;
	private String schemeEndDate;
	private java.lang.String productType;
	private java.lang.String incentiveNature;
	private java.lang.Integer quantity;
	private double perUnitPayout;
	private double totalIncentivePayout;
	private double growthFactor;
	private double minTarget;
	private double maxTarget;
	private double realTarget;
	private double saleValuePreviousMonth;
	private double saleValueAcheived;
	private double gateFactorPercent;
	private int isEligibleForPayout;
	private java.lang.Double minProductPriceforExclusion;
	private double saleValueAchievedExcMinPP;
	private double payoutPercent;
	private double slabBasedPayout;
	public Request() {
	}
	public java.lang.String getSchemeName() {
		return this.schemeName;
	}
	public void setSchemeName(java.lang.String schemeName) {
		this.schemeName = schemeName;
	}
	public java.lang.String getProductType() {
		return this.productType;
	}
	public void setProductType(java.lang.String productType) {
		this.productType = productType;
	}
	public java.lang.String getIncentiveNature() {
		return this.incentiveNature;
	}
	public void setIncentiveNature(java.lang.String incentiveNature) {
		this.incentiveNature = incentiveNature;
	}
	public java.lang.String getSchemeEndDate() {
		return this.schemeEndDate;
	}
	public void setSchemeEndDate(java.lang.String schemeEndDate) {
		this.schemeEndDate = schemeEndDate;
	}
	public java.lang.String getSchemeStartDate() {
		return this.schemeStartDate;
	}
	public void setSchemeStartDate(java.lang.String schemeStartDate) {
		this.schemeStartDate = schemeStartDate;
	}
	public java.lang.Integer getQuantity() {
		return this.quantity;
	}
	public void setQuantity(java.lang.Integer quantity) {
		this.quantity = quantity;
	}
	public void setRealTarget() {
        double temp = 100 + getGrowthFactor() ;
		double interimTarget = ((getSaleValuePreviousMonth() * temp) /100 );
		if (interimTarget <= getMinTarget()) {
			this.realTarget = getMinTarget();

		} else
			this.realTarget = interimTarget;

	}

	public double getGrowthFactor() {
		return this.growthFactor;
	}
	public void setGrowthFactor(double growthFactor) {
		this.growthFactor = growthFactor;
	}
	public double getMaxTarget() {
		return this.maxTarget;
	}
	public void setMaxTarget(double maxTarget) {
		this.maxTarget = maxTarget;
	}
	public double getMinTarget() {
		return this.minTarget;
	}
	public void setMinTarget(double minTarget) {
		this.minTarget = minTarget;
	}
	public double getPerUnitPayout() {
		return this.perUnitPayout;
	}
	public void setPerUnitPayout(double perUnitPayout) {
		this.perUnitPayout = perUnitPayout;
	}
	public double getRealTarget() {
		return this.realTarget;
	}
	public void setRealTarget(double realTarget) {
		this.realTarget = realTarget;
	}
	public double getSaleValuePreviousMonth() {
		return this.saleValuePreviousMonth;
	}
	public void setSaleValuePreviousMonth(double saleValuePreviousMonth) {
		this.saleValuePreviousMonth = saleValuePreviousMonth;
	}
	public double getTotalIncentivePayout() {
		return this.totalIncentivePayout;
	}
	public void setTotalIncentivePayout(double totalIncentivePayout) {
		this.totalIncentivePayout = totalIncentivePayout;
	}
	public double getSaleValueAcheived() {
		return this.saleValueAcheived;
	}
	public void setSaleValueAcheived(double saleValueAcheived) {
		this.saleValueAcheived = saleValueAcheived;
	}
	public double getGateFactorPercent() {
		return this.gateFactorPercent;
	}
	public void setGateFactorPercent(double gateFactorPercent) {
		this.gateFactorPercent = gateFactorPercent;
	}
	public void setIsEligibleForPayout() {
	    
   // System.out.println("getRealTarget : "+getRealTarget());
    //System.out.println("getSaleValueAcheived : "+getSaleValueAcheived());
    double temp = getSaleValueAcheived() / getRealTarget();
    //System.out.println("temp : "+temp) ;
   // System.out.println("getGateFactorPercent : "+getGateFactorPercent());
		if (getRealTarget() != 0) {
			// System.out.println("real target is not 0");

			if ((getSaleValueAcheived() / getRealTarget()) >= (getGateFactorPercent() / 100)) {
				this.isEligibleForPayout = 1;
				//System.out.println("isEligibleForPayout : "+isEligibleForPayout);
			} else
				this.isEligibleForPayout = 0;
			//	System.out.println("isEligibleForPayout : "+isEligibleForPayout);
		} else
			this.isEligibleForPayout = 0;
		//	System.out.println("isEligibleForPayout : "+isEligibleForPayout);
	}
	public java.lang.Double getMinProductPriceforExclusion() {
		return this.minProductPriceforExclusion;
	}
	public void setMinProductPriceforExclusion(
			java.lang.Double minProductPriceforExclusion) {
		this.minProductPriceforExclusion = minProductPriceforExclusion;
	}
	public int getIsEligibleForPayout() {
		return this.isEligibleForPayout;
	}
	public void setIsEligibleForPayout(int isEligibleForPayout) {
		this.isEligibleForPayout = isEligibleForPayout;
	}
	public double getSaleValueAchievedExcMinPP() {
		return this.saleValueAchievedExcMinPP;
	}
	public void setSaleValueAchievedExcMinPP(double saleValueAchievedExcMinPP) {
		this.saleValueAchievedExcMinPP = saleValueAchievedExcMinPP;
	}
	public double getPayoutPercent() {
		return this.payoutPercent;
	}
	public void setPayoutPercent(double payoutPercent) {
		this.payoutPercent = payoutPercent;
	}
	public double getSlabBasedPayout() {
		return this.slabBasedPayout;
	}
	public void setSlabBasedPayout() {

		this.slabBasedPayout = getPayoutPercent()
				* getSaleValueAchievedExcMinPP() / 100;
	}
	public Request(java.lang.String schemeName,
			java.lang.String schemeStartDate, java.lang.String schemeEndDate,
			java.lang.String productType, java.lang.String incentiveNature,
			java.lang.Integer quantity, double perUnitPayout,
			double totalIncentivePayout, double growthFactor, double minTarget,
			double maxTarget, double realTarget, double saleValuePreviousMonth,
			double saleValueAcheived, double gateFactorPercent,
			int isEligibleForPayout,
			java.lang.Double minProductPriceforExclusion,
			double saleValueAchievedExcMinPP, double payoutPercent,
			double slabBasedPayout) {
		this.schemeName = schemeName;
		this.schemeStartDate = schemeStartDate;
		this.schemeEndDate = schemeEndDate;
		this.productType = productType;
		this.incentiveNature = incentiveNature;
		this.quantity = quantity;
		this.perUnitPayout = perUnitPayout;
		this.totalIncentivePayout = totalIncentivePayout;
		this.growthFactor = growthFactor;
		this.minTarget = minTarget;
		this.maxTarget = maxTarget;
		this.realTarget = realTarget;
		this.saleValuePreviousMonth = saleValuePreviousMonth;
		this.saleValueAcheived = saleValueAcheived;
		this.gateFactorPercent = gateFactorPercent;
		this.isEligibleForPayout = isEligibleForPayout;
		this.minProductPriceforExclusion = minProductPriceforExclusion;
		this.saleValueAchievedExcMinPP = saleValueAchievedExcMinPP;
		this.payoutPercent = payoutPercent;
		this.slabBasedPayout = slabBasedPayout;
	}

}